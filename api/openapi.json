{
  "openapi": "3.1.0",
  "info": {
    "title": "Steam Trade Server",
    "version": "0.1.0",
    "description": "RESTful API to enable users to trade Steam items to and from automated trading accounts",
    "summary": "API for Steam Trade Server",
    "contact": {
      "name": "Zach Blake",
      "url": "https://twitter.com/heyztb",
      "email": "ztb@pm.me"
    },
    "license": {
      "name": "MIT",
      "url": "https://mit-license.org"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/trade/new": {
      "parameters": [],
      "post": {
        "summary": "Create new Trade Offer between User and appropriate Trade Bot",
        "operationId": "post-trade-new",
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "https://steamcommunity.com/tradeoffer/{tradeofferid}"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Create a new TradeProposal\n\nThe direction of a trade can be defined as follows:\n  1. The trade moves in the direction of the Trade Server when `offer` is empty and `want` is populated with items\n  2. The trade moves in the direction of the user when `offer` is populated and `want` is empty\n  3. The trade is mutual when both `offer` and `want` are populated\n  \n  Trades are validated before they are turned into actual Steam trade offers.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeProposal"
              }
            }
          },
          "description": "The body should contain a TradeProposal object."
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/token": {
      "parameters": [],
      "get": {
        "summary": "Get Token",
        "operationId": "get-token",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthToken"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Get token used for subsequent requests"
      }
    }
  },
  "components": {
    "schemas": {
      "TradeProposal": {
        "title": "TradeProposal",
        "type": "object",
        "description": "TradeProposal defines the information necessary for STS to validate and create a trade offer between the appropriate Trade Bot and a user.",
        "examples": [
          {
            "id": 1,
            "trade_url": "https://steamcommunity.com/tradeoffer/new/?partner=118985620&token=cNjbWUDT",
            "offer": [0],
            "want": [0]
          }
        ],
        "properties": {
          "trade_url": {
            "type": "string",
            "format": "uri",
            "example": "https://steamcommunity.com/tradeoffer/new/?partner=118985620&token=cNjbWUDT",
            "description": "Steam Trade Offer URL of the user participating in the trade"
          },
          "offer": {
            "description": "items to send",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "want": {
            "type": "array",
            "description": "items to receive",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        },
        "required": ["trade_url", "offer", "want"]
      },
      "Asset": {
        "title": "Asset",
        "type": "object",
        "description": "Asset defines the information needed to find a specific item on Steam",
        "properties": {
          "appID": {
            "type": "integer",
            "example": 730,
            "description": "The game the item belongs to"
          },
          "contextID": {
            "type": "integer",
            "example": 2,
            "default": 2
          },
          "assetID": {
            "type": "integer"
          },
          "classID": {
            "type": "integer"
          },
          "instanceID": {
            "type": "integer"
          }
        },
        "required": ["appID", "contextID", "assetID", "classID", "instanceID"]
      },
      "Error": {
        "title": "Error",
        "type": "object",
        "description": "Error contains information about what went wrong with a request",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code",
            "example": 404
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not Found"
          }
        },
        "required": ["code", "message"]
      },
      "AuthToken": {
        "title": "AuthToken",
        "x-stoplight": {
          "id": "f3xc8qc3g0bdf"
        },
        "type": "object",
        "description": "AuthToken represents data returned by the /token endpoint",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDozMDAwIl0sImV4cCI6MTY3NTQ3NDMzOSwiaWF0IjoxNjc1NDcwNzM5LCJpc3MiOiJodHRwczovL2dpdGh1Yi5jb20vaGV5enRiL3N0ZWFtLXRyYWRlLXNlcnZlciIsInNlc3Npb25faWQiOiIyZDY4YjA1YS1kOGM5LTRjOTItYWU0NC1hYTBmMDk0MDUwN2QifQ.XAtJaplLSUVzVUomTgR7t1jinmXjF5Pq0mKFxfTtgEw"
          },
          "token_type": {
            "type": "string",
            "example": "Bearer",
            "default": "Bearer"
          },
          "expires_in": {
            "type": "integer",
            "default": 3600,
            "example": 3600
          }
        },
        "required": ["token", "token_type", "expires_in"]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "name": "API Key",
        "type": "apiKey",
        "in": "header"
      }
    }
  }
}
