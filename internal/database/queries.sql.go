// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package database

import (
	"context"
)

const checkItem = `-- name: CheckItem :one
SELECT exists(
  select 1 from Inventory where app_id = $1 AND asset_id = $2 LIMIT 1
)
`

type CheckItemParams struct {
	AppID   int64
	AssetID int64
}

func (q *Queries) CheckItem(ctx context.Context, arg CheckItemParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkItem, arg.AppID, arg.AssetID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertItem = `-- name: InsertItem :one
INSERT INTO Inventory (
  bot_id,
  app_id,
  asset_id,
  class_id,
  instance_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, bot_id, app_id, asset_id, class_id, instance_id
`

type InsertItemParams struct {
	BotID      int64
	AppID      int64
	AssetID    int64
	ClassID    int64
	InstanceID int64
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, insertItem,
		arg.BotID,
		arg.AppID,
		arg.AssetID,
		arg.ClassID,
		arg.InstanceID,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.BotID,
		&i.AppID,
		&i.AssetID,
		&i.ClassID,
		&i.InstanceID,
	)
	return i, err
}

const removeItem = `-- name: RemoveItem :exec
DELETE FROM Inventory
WHERE app_id = $1 AND asset_id = $2
`

type RemoveItemParams struct {
	AppID   int64
	AssetID int64
}

func (q *Queries) RemoveItem(ctx context.Context, arg RemoveItemParams) error {
	_, err := q.db.ExecContext(ctx, removeItem, arg.AppID, arg.AssetID)
	return err
}
